"""
These are institutions that are partnered with Shuddhi Vidhya
These could be schools, colleges, corporates, organisations etc.
They contain information like name, website, who the admins are,
what classes/departments they contain
"""
type Institution @model {
  id: ID!
  "Name of the institution"
  name: String!
  "Location of the institution"
  location: String!
  "City or district that the institution belongs to"
  city: String!
  "Website URL"
  website: String
  "Phone number"
  phone: String
  "Logo url"
  logo: String
  "Short bio, could be their school motto"
  bio: String
  "admins of the institution manage the institution's properties"
  admins: [Member]
  "Fundamental units of Members belonging to the institution"
  classes: [Class] @connection(name: "InstitutionClassesConnection")
  "All learners belonging to the institution"
  learners: [Member]
}

"""
Groups of students other than classes.
These are more volatile grouping than classes are.
"""
type Group
  @model
  @auth(
    rules: [{ allow: owner, ownerField: "admins", operations: [update, read] }]
  ) {
  id: ID!
  "name of the group"
  name: String!
  "The id of the insitition that this group belongs to"
  institution: Institution! @connection(name: "InstitutionClassesConnection")
  "The admins of the group who can manage members of the class etc"
  admins: [Member]
  "List of members in this group"
  learners: [Member]
}

type Member @model {
  id: ID!
  "Name of the person"
  name: String!
  "Every member will be tied to an institution, instructors, course assistants will be tied to Shuddhi Vidhya"
  institution: Institution!
  "Courses they are instructors in"
  instructor: [CourseMember] @connection(name: "CourseInstructorConnection")
  "Courses that they are assistants in"
  assistant: [CourseMember] @connection(name: "CourseAssistantConnection")
  "Courses that they are learners in"
  learner: [CourseMember] @connection(name: "CourseLearnerConnection")
}

"""
Courses are created by instructors
"""
type Course
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "instructor", operations: [update, read] }
    ]
  ) {
  id: ID!
  "Instructor(s) of the course"
  instructors: [CourseMember] @connection(name: "CourseInstructorConnection")
  "Those who will be assisting with the course"
  assistants: [CourseMember] @connection(name: "CourseAssistantConnection")
  "Those who are participating as learners in the course"
  learners: [CourseMember] @connection(name: "CourseLearnerConnection")
  "When the course starts"
  start: AWSDate
  "When the course is expected to end"
  end: AWSDate
  "Number of hours the learners are expected to invest per week"
  creditHours: Int
  "Assignments that are part of this course"
  assignments: [Assignment]
  "Sections in the course"
  sections: [CourseSection]
}

"""
CourseSections belong to courses and contain assignments
"""
type CourseSection @model {
  id: ID!
  "Name of the section"
  name: String!
  "Section number"
  index: Float!
  "Course that this section belongs to"
  course: Course!
}

"""
Assignments are part of courses and need to be completed as part of the course
"""
type Assignment @model {
  id: ID!
  "Title of the assignment"
  title: String!
  "Id of the course that this assignment belongs to"
  course: Course!
  "Id of the section that this assignment belongs to"
  section: CourseSection!
  "When this assignment is due"
  deadline: AWSDateTime
  "Total number of points available to score in this assignment"
  points: Int
  "A description of what needs to be done in the assignment"
  instructions: String
  "A list of tasks to be completed as part of this assignment"
  tasks: [Task]
}

"""
Tasks to be completed as part of an assignment
INCOMPLETE
"""
type Task @model {
  id: ID!
  "Description of the task"
  task: String!
  "An enum of the fixed list of types of tasks"
  type: String!
}

"""
This is a join table that ties courses with Assistants
This is the way to establish many-to-many relationships
"""
type CourseMember @model {
  id: ID!
  "The course that this assistant belongs to"
  course: Course @connection(name: "CourseAssistantConnection")
  "The instructor(s) in the course"
  instructor: Member @connection(name: "InstructorCourseConnection")
  "The assistant(s)  in the course"
  assistant: Member @connection(name: "AssistantCourseConnection")
  "The learner(s) in the course"
  learner: Member @connection(name: "LearnerCourseConnection")
}
