enum GroupType {
  CLASS
  TEAM
  COORDINATION
}

type Mutation {
  addMember(
    name: String
    username: String
    email: String
    institution: String
    type: String
    title: String
    bio: String
  ): String @function(name: "createMember-${env}")
}

"""
These are institutions that are partnered with Shuddhi Vidhya
These could be schools, colleges, corporates, organisations etc.
They contain information like name, website, who the admins are,
what classes/departments they contain
"""
type Institution
  @model
  @searchable
  @auth(
    rules: [
      {
        allow: groups
        groups: ["SUPER_ADMIN"]
        operations: [create, update, delete]
      }
    ]
  ) {
  id: ID!
  "Name of the institution"
  name: String!
  "Location of the institution"
  location: String!
  "City or district that the institution belongs to"
  city: String!
  "Website URL"
  website: String
  "Phone number"
  phone: String
  "Logo URL"
  logo: String
  "Short bio, could be their school motto"
  bio: String
  "Admins of the institution manage the institution's properties"
  admins: [Member] @auth(rules: [{ allow: groups, groups: ["SUPER_ADMIN"] }])
  "All Members belonging to the institution"
  members: [Member] @auth(rules: [{ allow: groups, groups: ["SUPER_ADMIN"] }])
  "Search Field for searching the entire table for a string"
  searchField: String
}

"""
Groups of students. Groups can be of these types - class, team or coordinators.
"""
type Group
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["SUPER_ADMIN"] }
      { allow: owner, ownerField: "admins", operations: [update, read] }
    ]
  ) {
  id: ID!
  "Name of the group"
  name: String!
  "The id of the insitition that this group belongs to"
  institution: Institution!
  "Type of group this is. It can be Class, Team or Coordinators."
  type: GroupType!
  "The admins of the group who can manage members of the class etc"
  admins: [Member]
  "List of members in this group"
  members: [GroupMember] @connection(name: "GroupMemberConnection")
  "Search Field for searching the entire table for a string"
  searchField: String
}

type Member
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["SUPER_ADMIN"], operations: [create, delete] }
      { allow: owner, ownerField: "id", operations: [update] }
    ]
  ) {
  id: ID!
  "Name of the person"
  name: String!
  "Email ID of the person"
  email: String!
    @auth(
      rules: [{ allow: owner, ownerField: "id", operations: [read, update] }]
    )
  "Type of the user, i.e. the Cognito User pool group"
  type: String!
  "Title of the person"
  title: String
  "Bio of the person"
  bio: String
  "Every member will be tied to an institution, instructors, course assistants will be tied to Shuddhi Vidhya"
  institution: Institution!
    @auth(
      rules: [{ allow: groups, groups: ["SUPER_ADMIN"], operations: [update] }]
    )
  "Groups that this member belongs in"
  groups: [GroupMember] @connection(name: "MemberGroupConnection")
  "Courses they are instructors in"
  instructor: [CourseInstructor] @connection(name: "InstructorCourseConnection")
  "Courses that they are assistants in"
  assistant: [CourseAssistant] @connection(name: "AssistantCourseConnection")
  "Courses that they are learners in"
  learner: [CourseLearner] @connection(name: "LearnerCourseConnection")
  "Search Field for searching the entire table for a string"
  searchField: String
}

"""
Courses are created by instructors
"""
type Course
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["SUPER_ADMIN"] }
      {
        allow: owner
        ownerField: "instructors"
        operations: [create, update, read]
      }
    ]
  ) {
  id: ID!
  "Instructor(s) of the course"
  instructors: [CourseInstructor!]!
    @connection(name: "CourseInstructorConnection")
  "Those who will be assisting with the course"
  assistants: [CourseAssistant] @connection(name: "CourseAssistantConnection")
  "Those who are participating as learners in the course"
  learners: [CourseLearner] @connection(name: "CourseLearnerConnection")
  "When the course starts"
  start: AWSDate
  "When the course is expected to end"
  end: AWSDate
  "Number of hours the learners are expected to invest per week"
  creditHours: Int
  "Assignments that are part of this course"
  assignments: [Assignment]
  "Sections in the course"
  sections: [CourseSection]
  "Search Field for searching the entire table for a string"
  searchField: String
}

"""
CourseSections belong to courses and contain assignments
"""
type CourseSection
  @model
  @auth(rules: [{ allow: groups, groups: ["SUPER_ADMIN"] }]) {
  id: ID!
  "Name of the section"
  name: String!
  "Section number"
  index: Float!
  "Course that this section belongs to"
  course: Course!
}

"""
Assignments are part of courses and need to be completed as part of the course
"""
type Assignment
  @model
  @auth(rules: [{ allow: groups, groups: ["SUPER_ADMIN"] }]) {
  id: ID!
  "Title of the assignment"
  title: String!
  "Id of the course that this assignment belongs to"
  course: Course!
  "Id of the section that this assignment belongs to"
  section: CourseSection!
  "When this assignment is due"
  deadline: AWSDateTime
  "Total number of points available to score in this assignment"
  points: Int
  "A description of what needs to be done in the assignment"
  instructions: String
  "A list of tasks to be completed as part of this assignment"
  tasks: [Task]
}

"""
Tasks to be completed as part of an assignment
INCOMPLETE
"""
type Task @model @auth(rules: [{ allow: groups, groups: ["SUPER_ADMIN"] }]) {
  id: ID!
  "Description of the task"
  task: String!
  "An enum of the fixed list of types of tasks"
  type: String!
}

"""
Connection Table
This is a join table that ties courses with Instructors
This is the way to establish many-to-many relationships
"""
type CourseInstructor
  @model
  @auth(rules: [{ allow: groups, groups: ["SUPER_ADMIN"] }]) {
  id: ID!
  "The course that this instructor belongs to"
  course: Course @connection(name: "CourseInstructorConnection")
  "The instructor(s) in the course"
  instructor: Member @connection(name: "InstructorCourseConnection")
}

"""
Connection Table
This is a join table that ties courses with Assistants
This is the way to establish many-to-many relationships
"""
type CourseAssistant
  @model
  @auth(rules: [{ allow: groups, groups: ["SUPER_ADMIN"] }]) {
  id: ID!
  "The course that this instructor belongs to"
  course: Course @connection(name: "CourseAssistantConnection")
  "The instructor(s) in the course"
  assistant: Member @connection(name: "AssistantCourseConnection")
}

"""
Connection Table
This is a join table that ties courses with Learners
This is the way to establish many-to-many relationships
"""
type CourseLearner
  @model
  @auth(rules: [{ allow: groups, groups: ["SUPER_ADMIN"] }]) {
  id: ID!
  "The course that this instructor belongs to"
  course: Course @connection(name: "CourseLearnerConnection")
  "The instructor(s) in the course"
  learner: Member @connection(name: "LearnerCourseConnection")
}

"""
Connection Table
This is a join table that ties groups with Members
This is the way to establish many-to-many relationships
"""
type GroupMember
  @model
  @auth(rules: [{ allow: groups, groups: ["SUPER_ADMIN"] }]) {
  id: ID!
  "The group that the member belongs to"
  group: Group @connection(name: "GroupMemberConnection")
  "The members in the group"
  member: Member @connection(name: "MemberGroupConnection")
}
